import os
filename = input("Enter the path to controls.sii: ").strip()
if not os.path.exists(filename):
    raise FileNotFoundError(f"File '{filename}' does not exist")

keys = []
for line in open(filename, "r", encoding="utf-8"):
    if "semantical" in line:
        key = line.split(": ")[1].replace('"mix ', "").split(" ")[0].strip()
        controls = line.split(": ")[1].replace('"mix ', "")[len(key):-2].strip()
        print(f"Found key: {key} with controls: {controls}")
        is_axis = "j_" in controls and "adj_" not in controls
        keys.append(key + ("_axis" if is_axis else ""))

print(f"Found {len(keys)} keys.")
yes = input("Write new inputs.h file? (y/n): ").strip().lower()
if yes != "y":
    print("Exiting without writing.")
    for key in keys:
        print(f"- {key}")
    exit(0)
    
content = """// This file has been autogenerated by update_controls.py
const scs_input_device_input_t inputs[] = {
"""

for key in keys:
    if "_axis" in key:
        key = key.replace("_axis", "")
        content += "    {" + f'"{key}", "ETS2LA {key}", SCS_VALUE_TYPE_float' + "},\n"
    else:
        content += "    {" + f'"{key}", "ETS2LA {key}", SCS_VALUE_TYPE_bool' + "},\n"
        
content += "};\n"

output_filename = "inputs.h"
with open(output_filename, "w", encoding="utf-8") as f:
    f.write(content)

print(f"Written to {output_filename}.")

yes = input("Write new scscontroller.py file? (y/n): ").strip().lower()
if yes != "y":
    print("Exiting without writing.")
    exit(0)
    
content = """# This file has been autogenerated by update_controls.py
import mmap
import platform
import struct
import sys

from typing import Dict


# https://docs.python.org/3/whatsnew/3.7.html
# the insertion-order preservation nature of dict objects has
# been declared to be an official part of the Python language spec.
assert sys.version_info >= (3, 7)


class SCSController:
    MEM_NAME = r"Local\SCSControls"
    SHM_FILE = "/dev/shm/SCS/SCSControls"

    _BOOL_SIZE = struct.calcsize("?")
    _FLOAT_SIZE = struct.calcsize("f")

    _initialized = False

"""

for key in keys:
    if "_axis" in key:
        key = key.replace("_axis", "")
        content += f"    {key}: float = 0.0\n"
    else:
        content += f"    {key}: bool = False\n"
        
content += """
    def __init__(self):
        shm_size = 0
        self._shm_offsets: Dict[str, int] = {}
        for i, t in SCSController.__annotations__.items():
            self._shm_offsets[i] = shm_size

            if t is bool:
                shm_size += self._BOOL_SIZE
            elif t is float:
                shm_size += self._FLOAT_SIZE

        system = platform.system()
        if system == "Windows":
            self._shm_buff = mmap.mmap(0, shm_size, self.MEM_NAME)
        elif system == "Linux":
            self._shm_fd = open(self.SHM_FILE, "rb+")
            try:
                self._shm_buff = mmap.mmap(self._shm_fd.fileno(), length=shm_size,
                                           flags=mmap.MAP_SHARED, access=mmap.ACCESS_WRITE)
            except Exception as e:
                self._shm_fd.close()
                raise e
        else:
            raise RuntimeError(f"{system} is not supported")

        self._initialized = True

    def close(self):
        self._shm_buff.close()
        self._shm_fd.close()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def __getattribute__(self, key):
        if key not in SCSController.__annotations__:
            return super().__getattribute__(key)

        self._shm_buff.seek(self._shm_offsets[key])
        expected_type = SCSController.__annotations__[key]
        if expected_type is bool:
            return struct.unpack("?", self._shm_buff.read(self._BOOL_SIZE))[0]
        elif expected_type is float:
            return struct.unpack("f", self._shm_buff.read(self._FLOAT_SIZE))[0]
        else:
            raise RuntimeError(f"'{expected_type}' type is unknown")

    def __setattr__(self, key, value):
        if not self._initialized:
            return super().__setattr__(key, value)

        if key not in SCSController.__annotations__:
            raise AttributeError(f"'{key}' input is not known")

        value_type = type(value)
        expected_type = SCSController.__annotations__[key]
        if value_type is not expected_type:
            raise TypeError(f"'{key}' must be of type '{expected_type}'")

        self._shm_buff.seek(self._shm_offsets[key])
        if value_type is bool:
            self._shm_buff.write(struct.pack("?", value))
        elif value_type is float:
            self._shm_buff.write(struct.pack("f", value))
        else:
            raise TypeError(f"'{value_type}' type is not supported")

        self._shm_buff.flush()
"""

with open("scscontroller.py", "w", encoding="utf-8") as f:
    f.write(content)
    
print("Written to scscontroller.py.")